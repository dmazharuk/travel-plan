import {
  addCompanionToRoad,
  getCompanionsForRoad,
  removeCompanionFromRoad,
} from "@/app/entities/companion/api";
import { useAppDispatch, useAppSelector } from "@/shared/hooks/reduxHooks";
import { useState } from "react";
import { showAlert } from "@/features/alert/slice/alertsSlice";
import styles from "./CompanionWidget.module.css"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∏–ª–∏

export default function CompanionWidget() {
  const { road, isLoading } = useAppSelector((state) => state.road);
  const dispatch = useAppDispatch();
  const [newCompanionEmail, setNewCompanionEmail] = useState<string>("");
  const { user } = useAppSelector((state) => state.user);

  const isOwner = road?.author?.id === user?.id;
  const isCompanion = road?.companions?.some((c) => c.id === user?.id);

  const handleAddCompanion = async () => {
    if (!road?.id || !newCompanionEmail) return;

    if (!/\S+@\S+\.\S+/.test(newCompanionEmail)) {
      dispatch(
        showAlert({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email", status: "mistake" })
      );
      return;
    }

    try {
      const result = await dispatch(
        addCompanionToRoad({ roadId: road.id, email: newCompanionEmail })
      );

      if (addCompanionToRoad.fulfilled.match(result)) {
        setNewCompanionEmail("");
        dispatch(getCompanionsForRoad({ roadId: road.id }));
        dispatch(
          showAlert({ message: "–ü–æ–ø—É—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω", status: "success" })
        );
      } else {
        dispatch(
          showAlert({
            message: "–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω",
            status: "mistake",
          })
        );
      }
    } catch (error) {
      dispatch(
        showAlert({
          message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ø—É—Ç—á–∏–∫–∞",
          status: "mistake",
        })
      );
      console.error(error);
    }
  };

  const handleRemoveCompanion = async (userId: number) => {
    if (!road?.id) return;

    try {
      const result = await dispatch(
        removeCompanionFromRoad({ roadId: road.id, userId })
      );

      if (removeCompanionFromRoad.fulfilled.match(result)) {
        dispatch(getCompanionsForRoad({ roadId: road.id }));
        dispatch(showAlert({ message: "–ü–æ–ø—É—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω", status: "success" }));
      } else {
        dispatch(
          showAlert({
            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ø—É—Ç—á–∏–∫–∞",
            status: "mistake",
          })
        );
      }
    } catch (error) {
      console.error(error);
    }
  };

  return (
    <div className={styles.container}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≥–æ—Ä–æ–¥–∞ */}
      <h3 className={styles.title}>
        {/* –ö–æ–º–ø–∞–Ω—å–æ–Ω—ã –≤ –º–∞—Ä—à—Ä—É—Ç–µ –≤ –≥–æ—Ä–æ–¥ {road?.city} */}
        –ö–æ–º–ø–∞–Ω—å–æ–Ω—ã üêí
      </h3>

      {/* –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ö–æ–∑—è–∏–Ω–∞ –º–∞—Ä—à—Ä—É—Ç–∞ */}
      {isOwner && (
        <div className={styles.companionItem}>
          <span className={styles.ownerLabel}>
            –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º –º–∞—Ä—à—Ä—É—Ç–∞
          </span>
        </div>
      )}

      {/* –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞ –º–∞—Ä—à—Ä—É—Ç–∞ */}
      {isCompanion && !isOwner && (
        <div className={styles.companionItem}>
          <span className={styles.ownerLabel}>
            –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∫–æ–º–ø–∞–Ω—å–æ–Ω–æ–º —ç—Ç–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
          </span>
        </div>
      )}

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö–æ–∑—è–∏–Ω–µ –º–∞—Ä—à—Ä—É—Ç–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ö–æ–∑—è–∏–Ω) */}
      {!isOwner && road?.author && (
        <div className={styles.companionItemMain}>
         
          <div className={styles.companionInfo}>
            {/* <span>{`–ò–º—è: ${road.author.username}`}</span> */}
            <span className={styles.companionMain}>{`${road.author.username}`}</span>
            {/* <br /> */}
            <span>{`–ø–æ—á—Ç–∞: ${road.author.email}`}</span>
          </div>
          <span className={styles.ownerLabel}>
            –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä
          </span>
        </div>
      )}

      {/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞ (–¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ö–æ–∑—è–∏–Ω—É) */}
      {isOwner && (
        <div className={styles.addCompanionForm}>
          <input
            type="email"
            value={newCompanionEmail}
            onChange={(e) => setNewCompanionEmail(e.target.value)}
            placeholder="–í–≤–µ–¥–∏—Ç–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å"
            disabled={isLoading}
          />
          <button onClick={handleAddCompanion} disabled={isLoading}>
            {isLoading ? "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ..." : "–î–æ–±–∞–≤–∏—Ç—å"}
          </button>
        </div>
      )}

      {/* –°–ø–∏—Å–æ–∫ –ø–æ–ø—É—Ç—á–∏–∫–æ–≤ */}
      {isLoading ? (
        <div className={styles.loadingMessage}>
          –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω—å–æ–Ω–æ–≤...
        </div>
      ) : (
        <ul className={styles.companionList}>
          {road?.companions?.map((companion) => (
            <li key={companion.id} className={styles.companionItem}>
              {companion.id === user?.id ? (
                <span className={styles.ownerLabel}>–í—ã –º–æ–∂–µ—Ç–µ:</span>
              ) : (
                <>
                  {/* <span className={styles.ownerLabel}>
                    –ö–æ–º–ø–∞–Ω—å–æ–Ω —ç—Ç–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞:
                  </span> */}
                  <div className={styles.companionInfo}>
                    {/* <span>{`–ò–º—è: ${companion.username}`}</span> */}
                    <span className={styles.visitLabel}>{`${companion.username}`}</span>
                    {/* <br /> */}
                    <span className={styles.emailLabel}>{`–ø–æ—á—Ç–∞: ${companion.email}`}</span>
                  </div>
                </>
              )}

              {/* –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è */}
              {(isOwner || companion.id === user?.id) && (
                <div>
                  <button
                    onClick={() => handleRemoveCompanion(companion.id)}
                    disabled={isLoading}
                    className={styles.removeButton}
                  >
                    {companion.id === user?.id
                      ? "–£–¥–∞–ª–∏—Ç—å —Å–µ–±—è –∏–∑ –º–∞—Ä—à—Ä—É—Ç–∞ :("
                      // : `–£–¥–∞–ª–∏—Ç—å ${companion.username} –∏–∑ –∫–æ–º–ø–∞–Ω—å–æ–Ω–æ–≤`}
                      : `–£–¥–∞–ª–∏—Ç—å`}
                  </button>
                </div>
              )}
            </li>
          ))}
        </ul>
      )}
    </div>
  );
}
